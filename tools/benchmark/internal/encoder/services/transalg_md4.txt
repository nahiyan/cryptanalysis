__in bit M[16][32];
bit K[32] = {{ .DobbertinConstant }};
__out bit Hash[4][32];

bit A[32] = 0x67452301;
bit B[32] = 0xEFCDAB89;
bit C[32] = 0x98BADCFE;
bit D[32] = 0x10325476;

bit F(bit X[32], bit Y[32], bit Z[32])
{
    return (X & Y) | (!X & Z);
}

bit G(bit X[32], bit Y[32], bit Z[32])
{
    return X & Y | X & Z | Y & Z;
}

bit H(bit X[32], bit Y[32], bit Z[32])
{
    return X ^ Y ^ Z;
}

// Round 1, (a + F(b, c, d) + M) <<< s
bit FF(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(a, F(b, c, d), 32), M, 32);
    return (a <<< s);
}

// Round 2, (a + G(b, c, d) + M + 0x5A827999) <<< s
bit GG(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(sum(a, G(b, c, d), 32), M, 32), 0x5A827999, 32);
    return (a <<< s);
}

// Round 3, (a + H(b, c, d) + M + 0x6ED9EBA1) <<< s
bit HH(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(sum(a, H(b, c, d), 32), M, 32), 0x6ED9EBA1, 32);
    return (a <<< s);
}

void main()
{

    bit a[32] = A;
    bit b[32] = B;
    bit c[32] = C;
    bit d[32] = D;

    // Round 1: FF(a,b,c,d,M_j,s) 1-16

	{{ step 1 "a = FF(a, b, c, d, M[0], 3);" }}
	{{ step 2 "d = FF(d, a, b, c, M[1], 7);" }}
	{{ step 3 "c = FF(c, d, a, b, M[2], 11);" }}
	{{ step 4 "b = FF(b, c, d, a, M[3], 19);" }}

	{{ step 5 "a = FF(a, b, c, d, M[4], 3);" }}
	{{ step 6 "d = FF(d, a, b, c, M[5], 7);" }}
	{{ step 7 "c = FF(c, d, a, b, M[6], 11);" }}
	{{ step 8 "b = FF(b, c, d, a, M[7], 19);" }}
	
	{{ step 9 "a = FF(a, b, c, d, M[8], 3);" }}
	{{ step 10 "d = FF(d, a, b, c, M[9], 7);" }}
	{{ step 11 "c = FF(c, d, a, b, M[10], 11);" }}
	{{ step 12 "b = FF(b, c, d, a, M[11], 19);" }}

	{{ step 13 "a = FF(a, b, c, d, M[12], 3);" }}
	{{ step 14 "d = FF(d, a, b, c, M[13], 7);" }}
	{{ step 15 "c = FF(c, d, a, b, M[14], 11);" }}
	{{ step 16 "b = FF(b, c, d, a, M[15], 19);" }}

	// Round 2: GG(a,b,c,d,M_j,s) 17-32

	{{ step 17 "a = GG(a, b, c, d, M[0], 3);" }}
	{{ step 18 "d = GG(d, a, b, c, M[4], 5);" }}
	{{ step 19 "c = GG(c, d, a, b, M[8], 9);" }}
	{{ step 20 "b = GG(b, c, d, a, M[12], 13);" }}

	{{ step 21 "a = GG(a, b, c, d, M[1], 3);" }}
	{{ step 22 "d = GG(d, a, b, c, M[5], 5);" }}
	{{ step 23 "c = GG(c, d, a, b, M[9], 9);" }}
	{{ step 24 "b = GG(b, c, d, a, M[13], 13);" }}

	{{ step 25 "a = GG(a, b, c, d, M[2], 3);" }}
	{{ step 26 "d = GG(d, a, b, c, M[6], 5);" }}
	{{ step 27 "c = GG(c, d, a, b, M[10], 9);" }}
	{{ step 28 "b = GG(b, c, d, a, M[14], 13);" }}

	{{ step 29 "a = GG(a, b, c, d, M[3], 3);" }}
	{{ step 30 "d = GG(d, a, b, c, M[7], 5);" }}
	{{ step 31 "c = GG(c, d, a, b, M[11], 9);" }}
	{{ step 32 "b = GG(b, c, d, a, M[15], 13);" }}

	// Round 3: HH(a,b,c,d,M_j,s) 33-48

	{{ step 33 "a = HH(a, b, c, d, M[0], 3);" }}
	{{ step 34 "d = HH(d, a, b, c, M[8], 9);" }}
	{{ step 35 "c = HH(c, d, a, b, M[4], 11);" }}
	{{ step 36 "b = HH(b, c, d, a, M[12], 15);" }}

	{{ step 37 "a = HH(a, b, c, d, M[2], 3);" }}
	{{ step 38 "d = HH(d, a, b, c, M[10], 9);" }}
	{{ step 39 "c = HH(c, d, a, b, M[6], 11);" }}
	{{ step 40 "b = HH(b, c, d, a, M[14], 15);" }}

	{{ step 41 "a = HH(a, b, c, d, M[1], 3);" }}
	{{ step 42 "d = HH(d, a, b, c, M[9], 9);" }}
	{{ step 43 "c = HH(c, d, a, b, M[5], 11);" }}
	{{ step 44 "b = HH(b, c, d, a, M[13], 15);" }}

	{{ step 45 "a = HH(a, b, c, d, M[3], 3);" }}
	{{ step 46 "d = HH(d, a, b, c, M[11], 9);" }}
	{{ step 47 "c = HH(c, d, a, b, M[7], 11);" }}
	{{ step 48 "b = HH(b, c, d, a, M[15], 15);" }}
    
    Hash[0] = a;
    Hash[1] = b;
    Hash[2] = c;
    Hash[3] = d;

    {{ if eq $.OneTargetHash true -}}
    // 1^(128)
    assert(Hash[0]);
    assert(Hash[1]);
    assert(Hash[2]);
    assert(Hash[3]);
    {{- else }}
    // 0^(128)
    assert(!Hash[0]);
    assert(!Hash[1]);
    assert(!Hash[2]);
    assert(!Hash[3]);
    {{- end }}
}