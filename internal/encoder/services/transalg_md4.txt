__in bit M[16][32];
__out bit Hash[4][32];

bit F(bit X[32], bit Y[32], bit Z[32])
{
    return (X & Y) | (!X & Z);
}

bit G(bit X[32], bit Y[32], bit Z[32])
{
    return X & Y | X & Z | Y & Z;
}

bit H(bit X[32], bit Y[32], bit Z[32])
{
    return X ^ Y ^ Z;
}

// Round 1, (a + F(b, c, d) + M) <<< s
bit FF(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(a, F(b, c, d), 32), M, 32);
    return (a <<< s);
}

// Round 2, (a + G(b, c, d) + M + 0x5A827999) <<< s
bit GG(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(sum(a, G(b, c, d), 32), M, 32), 0x5A827999, 32);
    return (a <<< s);
}

// Round 3, (a + H(b, c, d) + M + 0x6ED9EBA1) <<< s
bit HH(bit a[32], bit b[32], bit c[32], bit d[32], bit M[32], int s)
{
    a = sum(sum(sum(a, H(b, c, d), 32), M, 32), 0x6ED9EBA1, 32);
    return (a <<< s);
}

void main()
{
    bit a[32] = 0x67452301;
    bit b[32] = 0xEFCDAB89;
    bit c[32] = 0x98BADCFE;
    bit d[32] = 0x10325476;
	bit K[32] = {{ .DobbertinConstant }};


    // Round 1: FF(a,b,c,d,M_j,s) 1-16

	{{ step 1 "bit a_1[32] = FF(a, b, c, d, M[0], 3);" }}
	{{ step 2 "bit d_2[32] = FF(d, a_1, b, c, M[1], 7);" }}
	{{ step 3 "bit c_3[32] = FF(c, d_2, a_1, b, M[2], 11);" }}
	{{ step 4 "bit b_4[32] = FF(b, c_3, d_2, a_1, M[3], 19);" }}

	{{ step 5 "bit a_5[32] = FF(a_1, b_4, c_3, d_2, M[4], 3);" }}
	{{ step 6 "bit d_6[32] = FF(d_2, a_5, b_4, c_3, M[5], 7);" }}
	{{ step 7 "bit c_7[32] = FF(c_3, d_6, a_5, b_4, M[6], 11);" }}
	{{ step 8 "bit b_8[32] = FF(b_4, c_7, d_6, a_5, M[7], 19);" }}
	
	{{ step 9 "bit a_9[30] = FF(a_5, b_8, c_7, d_6, M[8], 3);" }}
	{{ step 10 "bit d_10[32] = FF(d_6, a_9, b_8, c_7, M[9], 7);" }}
	{{ step 11 "bit c_11[32] = FF(c_7, d_10, a_9, b_8, M[10], 11);" }}
	{{ step 12 "bit b_12[32] = FF(b_8, c_11, d_10, a_9, M[11], 19);" }}

	{{ step 13 "bit a_13[32] = FF(a_9, b_12, c_11, d_10, M[12], 3);" }}
	{{ step 14 "bit d_14[32] = FF(d_10, a_13, b_12, c_11, M[13], 7);" }}
	{{ step 15 "bit c_15[32] = FF(c_11, d_14, a_13, b_12, M[14], 11);" }}
	{{ step 16 "bit b_16[32] = FF(b_12, c_15, d_14, a_13, M[15], 19);" }}

	// Round 2: GG(a,b,c,d,M_j,s) 17-32

	{{ step 17 "bit a_17[32] = GG(a_13, b_16, c_15, d_14, M[0], 3);" }}
	{{ step 18 "bit d_18[32] = GG(d_14, a_17, b_16, c_15, M[4], 5);" }}
	{{ step 19 "bit c_19[32] = GG(c_15, d_18, a_17, b_16, M[8], 9);" }}
	{{ step 20 "bit b_20[32] = GG(b_16, c_19, d_18, a_17, M[12], 13);" }}

	{{ step 21 "bit a_21[32] = GG(a_17, b_20, c_19, d_18, M[1], 3);" }}
	{{ step 22 "bit d_22[32] = GG(d_18, a_21, b_20, c_19, M[5], 5);" }}
	{{ step 23 "bit c_23[32] = GG(c_19, d_22, a_21, b_20, M[9], 9);" }}
	{{ step 24 "bit b_24[32] = GG(b_20, c_23, d_22, a_21, M[13], 13);" }}

	{{ step 25 "bit a_25[32] = GG(a_21, b_24, c_23, d_22, M[2], 3);" }}
	{{ step 26 "bit d_26[32] = GG(d_22, a_25, b_24, c_23, M[6], 5);" }}
	{{ step 27 "bit c_27[32] = GG(c_23, d_26, a_25, b_24, M[10], 9);" }}
	{{ step 28 "bit b_28[32] = GG(b_24, c_27, d_26, a_25, M[14], 13);" }}

	{{ step 29 "bit a_29[32] = GG(a_25, b_28, c_27, d_26, M[3], 3);" }}
	{{ step 30 "bit d_30[32] = GG(d_26, a_29, b_28, c_27, M[7], 5);" }}
	{{ step 31 "bit c_31[32] = GG(c_27, d_30, a_29, b_28, M[11], 9);" }}
	{{ step 32 "bit b_32[32] = GG(b_28, c_31, d_30, a_29, M[15], 13);" }}

	// Round 3: HH(a,b,c,d,M_j,s) 33-48

	{{ step 33 "bit a_33[32] = HH(a_29, b_32, c_31, d_30, M[0], 3);" }}
	{{ step 34 "bit d_34[32] = HH(d_30, a_33, b_32, c_31, M[8], 9);" }}
	{{ step 35 "bit c_35[32] = HH(c_31, d_34, a_33, b_32, M[4], 11);" }}
	{{ step 36 "bit b_36[32] = HH(b_32, c_35, d_34, a_33, M[12], 15);" }}

	{{ step 37 "bit a_37[32] = HH(a_33, b_36, c_35, d_34, M[2], 3);" }}
	{{ step 38 "bit d_38[32] = HH(d_34, a_37, b_36, c_35, M[10], 9);" }}
	{{ step 39 "bit c_39[32] = HH(c_35, d_38, a_37, b_36, M[6], 11);" }}
	{{ step 40 "bit b_40[32] = HH(b_36, c_39, d_38, a_37, M[14], 15);" }}

	{{ step 41 "bit a_41[32] = HH(a_37, b_40, c_39, d_38, M[1], 3);" }}
	{{ step 42 "bit d_42[32] = HH(d_38, a_41, b_40, c_39, M[9], 9);" }}
	{{ step 43 "bit c_43[32] = HH(c_39, d_42, a_41, b_40, M[5], 11);" }}
	{{ step 44 "bit b_44[32] = HH(b_40, c_43, d_42, a_41, M[13], 15);" }}

	{{ step 45 "bit a_45[32] = HH(a_41, b_44, c_43, d_42, M[3], 3);" }}
	{{ step 46 "bit d_46[32] = HH(d_42, a_45, b_44, c_43, M[11], 9);" }}
	{{ step 47 "bit c_47[32] = HH(c_43, d_46, a_45, b_44, M[7], 11);" }}
	{{ step 48 "bit b_48[32] = HH(b_44, c_47, d_46, a_45, M[15], 15);" }}
    
    Hash[0] = {{ .LastRegVar1 }};
    Hash[1] = {{ .LastRegVar2 }};
    Hash[2] = {{ .LastRegVar3 }};
    Hash[3] = {{ .LastRegVar4 }};

	{{ constraints }}

    {{ if eq $.OneTargetHash true -}}
    // 1^(128)
	assert(Hash[0] & Hash[1] & Hash[2] & Hash[3]);
    {{- else }}
    // 0^(128)
    assert(!Hash[0] & !Hash[1] & !Hash[2] & !Hash[3]);
    {{- end }}
}